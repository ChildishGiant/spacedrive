/*
 * This script generates an index file for each asset folder specified in `assetFolders`.
 * The index file will export all assets in the folder as an object.
 *
 * Usage:
 *   1. Add the names of your asset folders to the `assetFolders` array.
 *   2. Run `pnpm assets gen` to generate the index files.
 *
 * The generated index files will have the name `index.ts` and will be located in the root of each asset folder.
 */
import fs from 'node:fs/promises';
import { dirname, join, relative } from 'node:path';
import { fileURLToPath } from 'node:url';
import prettier from 'prettier';

const assetFolders = [
	'icons',
	'images',
	'svgs/brands',
	'svgs/ext/Extras',
	'svgs/ext/Code',
	'videos'
];

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

prettier.resolveConfig(join(__dirname, '..', '..', '..', '.prettierrc.js')).then((options) =>
	Promise.all(
		assetFolders.map(async (folder) => {
			const indexFilePath = join(__dirname, '..', 'react', folder, 'index.ts');
			const assetsFolderPath = join(__dirname, '..', folder);

			const fileNames = await fs.readdir(assetsFolderPath);

			// Generate the import statements for each asset.
			const assetImports = fileNames
				.filter((fileName) => fileName !== 'index.ts' && !/(^|\/)\.[^\/\.]/g.test(fileName))
				.map((fileName) => {
					const variableName = fileName.split('.')[0].replace(/-/g, '');

					const relativePath = relative(
						join(indexFilePath, '../'),
						join(assetsFolderPath, fileName)
					);

					if (folder.startsWith('svgs'))
						return `export { ReactComponent as ${variableName} } from '${relativePath}';`;

					return `export { default as ${variableName} } from '${relativePath}';`;
				})
				.join('\n');

			// Generate the index file content.
			const indexFileContent = await prettier.format(
				`
				/*
				 * This file was automatically generated by a script.
				 * To regenerate this file, run: pnpm assets gen
				 */

				${assetImports}`,
				{ ...options, parser: 'typescript' }
			);

			// Write the index file.
			await fs.mkdir(join(indexFilePath, '../'), { recursive: true });
			await fs.writeFile(indexFilePath, indexFileContent);
		})
	)
);

prettier.resolveConfig(join(__dirname, '..', '..', '..', '.prettierrc.js')).then((options) =>
	Promise.all(
		assetFolders.map(async (folder) => {
			const indexFilePath = join(__dirname, '..', 'solid', folder, 'index.ts');
			const assetsFolderPath = join(__dirname, '..', folder);

			const fileNames = await fs.readdir(assetsFolderPath);

			// Generate the import statements for each asset.
			const assetImports = fileNames
				.filter((fileName) => fileName !== 'index.ts' && !/(^|\/)\.[^\/\.]/g.test(fileName))
				.map((fileName) => {
					const variableName = fileName.split('.')[0].replace(/-/g, '');

					const relativePath = relative(
						join(indexFilePath, '../'),
						join(assetsFolderPath, fileName)
					);

					return `export { default as ${variableName} } from '${relativePath}';`;
				})
				.join('\n');

			// Generate the index file content.
			const indexFileContent = await prettier.format(
				`
				/*
				 * This file was automatically generated by a script.
				 * To regenerate this file, run: pnpm assets gen
				 */

				${assetImports}`,
				{ ...options, parser: 'typescript' }
			);

			// Write the index file.
			await fs.mkdir(join(indexFilePath, '../'), { recursive: true });
			await fs.writeFile(indexFilePath, indexFileContent);
		})
	)
);
